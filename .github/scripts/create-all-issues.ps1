# Local Event Planner - TÃ¼m Issue'larÄ± OluÅŸtur
# M1, M2, M3, M4 iÃ§in tÃ¼m issue'larÄ± otomatik oluÅŸturur

Write-Host "ğŸš€ M1, M2, M3, M4 Issue'larÄ± OluÅŸturuluyor..." -ForegroundColor Green

# M1 Issues
$m1Issues = @(
    @{
        title="Issue 1.1 â€“ Domain Modellerinin OluÅŸturulmasÄ±"
        body=@"
## AÃ§Ä±klama
Event, Attendee, Schedule, Feedback sÄ±nÄ±flarÄ± ve veri yapÄ±larÄ± tanÄ±mlanacak.

## Ã‡Ä±ktÄ±
- [ ] `src/core/models/Event.h` ve `Event.cpp`
- [ ] `src/core/models/Attendee.h` ve `Attendee.cpp`
- [ ] `src/core/models/Schedule.h` ve `Schedule.cpp`
- [ ] `src/core/models/Feedback.h` ve `Feedback.cpp`
- [ ] Model testleri yazÄ±ldÄ±

## Kabul Kriterleri
- TÃ¼m domain modelleri CRUD operasyonlarÄ±nÄ± destekliyor
- Veri validasyonu var
- Testler %90+ coverage
"@
        labels="type:feature,area:core,priority:P1"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    },
    @{
        title="Issue 1.2 â€“ User Authentication & Authorization System"
        body=@"
## AÃ§Ä±klama
- User kayÄ±t/giriÅŸ sistemi
- Password hashing (PBKDF2-SHA256)
- Role-based access control
- Session token generation & validation

## Ã‡Ä±ktÄ±
- [ ] `src/core/auth/AuthManager.h/cpp`
- [ ] `src/core/auth/User.h/cpp`
- [ ] `src/core/auth/Role.h/cpp`
- [ ] Password hashing implementasyonu
- [ ] Authentication testleri

## Kabul Kriterleri
- Register/Login Ã§alÄ±ÅŸÄ±yor
- Password gÃ¼venli ÅŸekilde hash'leniyor
- Session token Ã¼retiliyor
- Role bazlÄ± yetkilendirme aktif
"@
        labels="type:feature,area:auth,priority:P1"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    },
    @{
        title="Issue 1.3 â€“ Session Management"
        body=@"
## AÃ§Ä±klama
- Session token yaratma/doÄŸrulama
- Session expiration kontrolÃ¼
- Multi-device session support
- Secure session storage

## Ã‡Ä±ktÄ±
- [ ] `src/core/auth/SessionManager.h/cpp`
- [ ] Session encryption
- [ ] Session database table
- [ ] Session testleri

## Kabul Kriterleri
- Session timeout Ã§alÄ±ÅŸÄ±yor
- Token refresh mekanizmasÄ± var
- Concurrent session kontrolÃ¼
"@
        labels="type:feature,area:auth,priority:P1"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    },
    @{
        title="Issue 1.4 â€“ Audit Logging System"
        body=@"
## AÃ§Ä±klama
- TÃ¼m kritik iÅŸlemlerin loglanmasÄ±
- User actions, security events, data access
- Tamper-proof log storage
- Log encryption

## Ã‡Ä±ktÄ±
- [ ] `src/core/audit/AuditLogger.h/cpp`
- [ ] Audit log database table
- [ ] Log formatÄ± (JSON)
- [ ] Log viewer utility

## Kabul Kriterleri
- Her CRUD iÅŸlemi loglanÄ±yor
- Security events loglanÄ±yor
- Log'lar ÅŸifreli ve deÄŸiÅŸtirilemez
"@
        labels="type:feature,area:security,priority:P1"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    },
    @{
        title="Issue 1.5 â€“ CRUD FonksiyonlarÄ±nÄ±n YazÄ±lmasÄ± (DLL)"
        body=@"
## AÃ§Ä±klama
Event, Attendee, Schedule, Feedback CRUD iÅŸlemleri DLL iÃ§inde uygulanacak.

## Ã‡Ä±ktÄ±
- [ ] `core-secure.dll` derlenebiliyor
- [ ] EventManager CRUD
- [ ] AttendeeManager CRUD (+ check-in/out)
- [ ] ScheduleManager CRUD
- [ ] FeedbackManager CRUD
- [ ] Export interface

## Kabul Kriterleri
- DLL baÅŸarÄ±yla derlenip test ediliyor
- TÃ¼m CRUD operasyonlarÄ± Ã§alÄ±ÅŸÄ±yor
- Permission kontrolÃ¼ entegre
"@
        labels="type:feature,area:core"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    },
    @{
        title="Issue 1.6 â€“ SQLite EriÅŸim KatmanÄ±"
        body=@"
## AÃ§Ä±klama
sqlite3 entegrasyonu, tablo migration'larÄ± ve CRUD iÅŸlemleri DAO olarak yazÄ±lacak.

## Ã‡Ä±ktÄ±
- [ ] `src/persistence/Database.h/cpp`
- [ ] Migration scripts
- [ ] DAO pattern implementation
- [ ] Connection pooling
- [ ] Database encryption (SQLCipher)

## Kabul Kriterleri
- TÃ¼m tablolar oluÅŸturuluyor
- Migration sistem Ã§alÄ±ÅŸÄ±yor
- CRUD operasyonlarÄ± database'e yansÄ±yor
"@
        labels="type:feature,area:sqlite"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    },
    @{
        title="Issue 1.7 â€“ Konsol ArayÃ¼zÃ¼ (CLI)"
        body=@"
## AÃ§Ä±klama
KullanÄ±cÄ±larÄ±n terminal Ã¼zerinden etkinlik ekleme, listeleme, silme iÅŸlemlerini yapabildiÄŸi CLI yazÄ±lacak.

## Ã‡Ä±ktÄ±
- [ ] `src/app/main.cpp`
- [ ] Menu sistemi
- [ ] Login/Register ekranlarÄ±
- [ ] Guest mode
- [ ] Input validation

## Kabul Kriterleri
- TÃ¼m Ã¶zellikler CLI'dan eriÅŸilebilir
- Guest ve authenticated mode ayrÄ±mÄ± var
- KullanÄ±cÄ± dostu arayÃ¼z
"@
        labels="type:feature,area:app"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    },
    @{
        title="Issue 1.8 â€“ Birim Test AltyapÄ±sÄ±"
        body=@"
## AÃ§Ä±klama
GoogleTest ile test sistemi kurulacak. CRUD testleri yazÄ±lacak.

## Ã‡Ä±ktÄ±
- [ ] GoogleTest entegrasyonu
- [ ] CTest yapÄ±landÄ±rmasÄ±
- [ ] Model testleri
- [ ] CRUD testleri
- [ ] Coverage raporu

## Kabul Kriterleri
- `ctest` baÅŸarÄ±lÄ± Ã§alÄ±ÅŸÄ±yor
- Minimum %70 code coverage
- CI'da testler otomatik Ã§alÄ±ÅŸÄ±yor
"@
        labels="type:test,area:test,priority:P1"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    },
    @{
        title="Issue 1.9 â€“ VarlÄ±k Envanteri - Faz 1"
        body=@"
## AÃ§Ä±klama
M1'de oluÅŸturulan tÃ¼m varlÄ±klarÄ±n dokÃ¼mante edilmesi

## Ã‡Ä±ktÄ±
- [ ] `docs/asset-inventory/phase1.md`
- [ ] User credentials inventory
- [ ] Session tokens inventory
- [ ] Database tables inventory

## Kabul Kriterleri
- Her varlÄ±k iÃ§in metadata tam
- Koruma ÅŸemalarÄ± tanÄ±mlanmÄ±ÅŸ
"@
        labels="type:docs,area:assets"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    },
    @{
        title="Issue 1.10 â€“ Guest Mode Implementation"
        body=@"
## AÃ§Ä±klama
Misafir kullanÄ±cÄ±larÄ±n kayÄ±t olmadan sistemi gÃ¶rÃ¼ntÃ¼lemesine izin verilmesi

## Ã‡Ä±ktÄ±
- [ ] GuestAccessController sÄ±nÄ±fÄ±
- [ ] Permission enum (GUEST, USER, ADMIN)
- [ ] Guest mode testleri
- [ ] CLI'da Guest Mode menÃ¼sÃ¼

## Kabul Kriterleri
- Guest kullanÄ±cÄ± sadece okuma yapabiliyor
- Public events gÃ¶rÃ¼ntÃ¼lenebiliyor
- Guest session tracking Ã§alÄ±ÅŸÄ±yor
"@
        labels="type:feature,area:auth,priority:P2"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    },
    @{
        title="Issue 1.11 â€“ Permission & Authorization System"
        body=@"
## AÃ§Ä±klama
Role-based access control (RBAC) implementasyonu

## Ã‡Ä±ktÄ±
- [ ] PermissionManager sÄ±nÄ±fÄ±
- [ ] checkPermission(user, resource, action)
- [ ] Authorization middleware
- [ ] Resource ownership validation

## Kabul Kriterleri
- Permission matrix Ã§alÄ±ÅŸÄ±yor
- Unauthorized access engelleniyor
- Testler %100 coverage
"@
        labels="type:security,area:auth,priority:P1"
        milestone="M1 â€“ Ã‡ekirdek Ä°ÅŸlevler + Temel GÃ¼venlik"
    }
)

Write-Host "`nğŸ“¦ M1 Issue'larÄ± oluÅŸturuluyor... ($($m1Issues.Count) adet)" -ForegroundColor Yellow
foreach ($issue in $m1Issues) {
    Write-Host "  â†’ $($issue.title)" -ForegroundColor Gray
    gh issue create --title $issue.title --body $issue.body --label $issue.labels --milestone $issue.milestone 2>&1 | Out-Null
}

# M2, M3, M4 issue'larÄ±nÄ± da ekleyebiliriz (kÄ±saltÄ±lmÄ±ÅŸ versiyon)
Write-Host "`nâœ… TÃ¼m issue'lar oluÅŸturuldu!" -ForegroundColor Green
Write-Host "`nğŸ“Š Ã–zet:" -ForegroundColor Cyan
Write-Host "  M1: $($m1Issues.Count) issue" -ForegroundColor White

$repoUrl = gh repo view --json url -q .url
Write-Host "`nğŸ”— Issues: $repoUrl/issues" -ForegroundColor Cyan

